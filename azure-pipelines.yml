trigger:
  branches:
    include:
      - refs/heads/release

pr:
  - refs/heads/release

pool:
  vmImage: "ubuntu-latest"

variables:
  npm_config_cache: $(Pipeline.Workspace)/.npm
  cache_key: 'npm | "$(Agent.OS)" | package.json'

stages:
  - stage: checkBeforeBuild
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - job: Linter
        displayName: Lint Project
        steps:
          - task: UseNode@1
            inputs:
              version: "18.x"
          - task: Cache@2
            inputs:
              key: $(cache_key)
              path: $(npm_config_cache)
            displayName: Use Cache
          - task: CmdLine@2
            inputs:
              script: |
                npm install
                npm run lint
      - job: Formatting
        displayName: Formatting Check
        steps:
          - task: UseNode@1
            inputs:
              version: "18.x"
          - task: Cache@2
            inputs:
              key: $(cache_key)
              path: $(npm_config_cache)
            displayName: Use Cache
          - task: CmdLine@2
            inputs:
              script: |
                npm install
                npm run fmt.check
  - stage: build
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
    dependsOn: checkBeforeBuild
    jobs:
      - job: Build
        displayName: Build
        steps:
          - task: UseNode@1
            inputs:
              version: "18.x"
          - task: Cache@2
            inputs:
              key: $(cache_key)
              path: $(npm_config_cache)
            displayName: Use Cache
          - task: CmdLine@2
            inputs:
              script: |
                npm install
                npm run build
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "./dist"
              artifact: "pr-build"
              publishLocation: "pipeline"
  - stage: checkAfterBuild
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
    dependsOn: build
    jobs:
      - job: accessibility
        displayName: Accessibility Check
        steps:
          - task: UseNode@1
            inputs:
              version: "18.x"
          - task: Cache@2
            inputs:
              key: $(cache_key)
              path: $(npm_config_cache)
            displayName: Use Cache
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: "current"
              artifactName: "pr-build"
              targetPath: "./dist"
          - task: CmdLine@2
            displayName: Accessibility Check
            inputs:
              script: |
                npm install
                npm run a11y.check
          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            inputs:
              targetPath: "./accessibility-check-results"
              artifact: "accessibility-check-results"
              publishLocation: "pipeline"
      - job: lighthouseci
        displayName: Lighthouse Check
        steps:
          - task: UseNode@1
            inputs:
              version: "18.x"
          - task: Cache@2
            inputs:
              key: $(cache_key)
              path: $(npm_config_cache)
            displayName: Use Cache
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: "current"
              artifactName: "pr-build"
              targetPath: "./dist"
          - task: CmdLine@2
            displayName: Lighthouse CI
            inputs:
              script: |
                npm install -g @lhci/cli@0.13.x
                lhci autorun
          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            inputs:
              targetPath: "./.lighthouseci"
              artifact: "lighthouse-results"
              publishLocation: "pipeline"
