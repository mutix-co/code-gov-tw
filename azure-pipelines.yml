pool:
  vmImage: ubuntu-latest

pr:
  branches:
    exclude:
      - main
      - pre-release
      - release

stages:
  - stage: checkBeforeBuild
    condition: and(eq(variables['Build.Reason'], 'PullRequest'))
    jobs:
      - job: Linter
        displayName: Lint Project
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "18.x"
          - task: CmdLine@2
            inputs:
              script: |
                npm install
                npm run lint
      - job: Formatting
        displayName: Formatting Check
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "18.x"
          - task: CmdLine@2
            inputs:
              script: |
                npm install
                npm run fmt.check
  - stage: build
    dependsOn: checkBeforeBuild
    jobs:
      - job: Build
        displayName: Build
        steps:
          - task: NodeTool@0
            inputs:
              versionSource: "spec"
              versionSpec: "18.x"
          - task: CmdLine@2
            inputs:
              script: |
                npm install
                npm run build
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "./dist"
              artifact: "build"
              publishLocation: "pipeline"
  - stage: checkAfterBuild
    dependsOn: build
    jobs:
      - job: accessibility
        displayName: Accessibility Check
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "18.x"
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: "current"
              artifactName: "build"
              targetPath: "./dist"
          - task: CmdLine@2
            displayName: Accessibility Check
            inputs:
              script: |
                npm install -g accessibility-checker
                npm run a11y.check
          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            inputs:
              targetPath: "./accessibility-check-results"
              artifact: "accessibility-check-results"
              publishLocation: "pipeline"
      - job: lighthouseci
        displayName: Lighthouse Check
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "18.x"
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: "current"
              artifactName: "build"
              targetPath: "./dist"
          - task: CmdLine@2
            displayName: Lighthouse CI
            inputs:
              script: |
                npm install -g @lhci/cli@0.13.x
                lhci autorun
          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            inputs:
              targetPath: "./.lighthouseci"
              artifact: "lighthouse-results"
              publishLocation: "pipeline"

  - stage: pre_release
    displayName: Pre-release
    condition: and(eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    dependsOn: []
    pool:
      vmImage: ubuntu-latest

    jobs:
      - job: build
        displayName: Build
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "18.x"
          - task: CmdLine@2
            inputs:
              script: |
                npm install
                npm run build
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "./dist"
              artifact: "pre-release-build"
              publishLocation: "pipeline"
          - task: CmdLine@2
            displayName: "commit changes"
            inputs:
              script: |
                git checkout -b pre-release
                git add ./dist
                git commit -m "[skip ci] Pre-release build"
                git push origin pre-release
  - stage: release
    displayName: Release
    dependsOn: []
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.Reason'], 'Manual'))
    pool:
      vmImage: ubuntu-latest
    jobs:
      - job: build_release
        displayName: Build
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: "18.x"
          - task: CmdLine@2
            inputs:
              script: |
                npm install
                npm run build
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: "./dist"
              artifact: "release-build"
              publishLocation: "pipeline"
          - task: CmdLine@2
            displayName: "Commit changes"
            inputs:
              script: |
                git checkout -b release
                git add ./dist
                git commit -m "[skip ci] Release build"
                git push origin release
      - job: deploy_production
        steps:
          - task: GoTool@0
            inputs:
              version: "1.22.1"
          - task: CmdLine@2
            displayName: Install pinata-go-cli and auth
            inputs:
              script: |
                echo Write your commands here
                git clone https://github.com/PinataCloud/pinata-go-cli
                ls -al
                cd pinata-go-cli
                go build
                mv pinata ../
                cd ..
                ./pinata auth $(PINATA_JWT)
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: "current"
              artifactName: "release-build"
              targetPath: "./dist"
          - task: CmdLine@2
            name: pinata
            displayName: Publish to Pinata
            inputs:
              script: |
                name=`git log -n 1 --format=format:%h`
                cid=`./pinata upload --name $name --cid-only ./dist | tail -n 1`
                cidlist=`./pinata list | grep "ipfs_pin_hash" | cut -d '"' -f 4`
                count=`echo $cidlist | wc -l`
                if [ "$count" -gt 2 ]; then 
                  lastcid=`echo $cidlist | tail -n 1`
                  ./pinata unpin $lastcid;
                fi
                echo "##vso[task.setvariable variable=cid]$cid"
          - task: CmdLine@2
            displayName: Update DNS with CID
            inputs:
              script: |
                echo $(cid)
                curl -X PATCH \
                  --url "https://api.cloudflare.com/client/v4/zones/$(ZONE_ID)/dns_records/$(DNS_RECORD_ID)" \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $(CLOUDFLARE_API_TOKEN)" \
                  -d '{"dnslink": "'/ipfs/$(cid)'"}' > response.json
                result=`grep "success" response.json | awk '{print $2}' | tr -d ','`
                if [ "$result" != "true" ]; then
                  echo "Failed to update DNS"
                  exit 1
                fi
